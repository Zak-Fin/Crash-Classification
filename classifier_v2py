import math
from matplotlib import pyplot as plt
import pandas as pd
import numpy as np
import os
import re
from sklearn.ensemble import RandomForestClassifier
from sklearn.impute import SimpleImputer
from sklearn.metrics import accuracy_score, confusion_matrix
from sklearn.model_selection import train_test_split
import pandas as pd
import seaborn as sns
import pickle

from sklearn.model_selection import train_test_split
# dir = 'cycle-crash-dataset/combined/'
def extract_features_acc(file_name):
      features = {}
      data = []
      x_data = []
      y_data = []
      z_data = []
      pressure = []
      tokens = file_name.split('_')
      identifier = (tokens[0])
      activity = tokens[2]
      with open('dataset02/v2/'+file_name) as file:
        if 'pressure' in file_name:
             for line in file:
                value = line.replace('P', '')
                pressure.append(value)
            
             pressure = np.array(pressure).astype(float)
             features['mean_p'] = np.mean(pressure)
             features['std_p'] = np.std(pressure)
             features['label'] = activity

        else:
             for line in file:
                 pattern = r'X(-?\d+\.\d+)Y(-?\d+\.\d+)Z(-?\d+\.\d+)'
                 string = line
                 match = re.search(pattern, string)
                 if match:
                     x = float(match.group(1))
                     y = float(match.group(2))
                     z = float(match.group(3))
                     x_data.append(x)
                     y_data.append(y)
                     z_data.append(z)
                     

             data = [x_data, y_data, z_data]
                     
             x = data[0]
             y = data[1]
             z = data[2]
 
        
             features['mean_x'] = np.mean(x)
             features['mean_y'] = np.mean(y)
             features['mean_z'] = np.mean(z)
             features['std_x'] = np.std(x)
             features['std_y'] = np.std(y)
             features['std_z'] = np.std(z)
             features['label'] = activity
    
             print(features)
            
        return features
      
def serialise_classifier(clf):
         with open('output/classifier_3.pickle', 'wb') as f:
             pickle.dump(clf, f)
   
if __name__ == "__main__":
     file_names = os.listdir('dataset02/v2/')
     features = []
    
     for file_name in file_names:
         if 'accelerometer' in file_name:
             features.append(extract_features_acc(file_name))
             print(features)
         elif 'gyroscope' in file_name:
             features.append(extract_features_acc(file_name))
         elif 'pressure' in file_name:
             features.append(extract_features_acc(file_name)) 

     df = pd.DataFrame(features)
    
     

     X = df.drop('label', axis=1)
     y = df['label']
    
     print(np.size(df))

     X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
    #  X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

    #  removing nulls
     imputer = SimpleImputer(strategy='mean')  # also can use 'median' or 'most_frequent'
     X_train = pd.DataFrame(imputer.fit_transform(X_train), columns=X_train.columns)
     X_test = pd.DataFrame(imputer.fit_transform(X_test), columns=X_test.columns)

    #  X_train = X_train.dropna()
    #  y_train = y_train[X_train.index]
    #  X_test = X_test.dropna()
    #  y_test = y_test[X_test.index]

    #  clf = RandomForestClassifier(n_estimators=300, random_state=42, max_depth=8)
     clf = RandomForestClassifier(n_estimators=1000, random_state=42, max_depth=7, criterion='entropy')
     clf.fit(X_train, y_train)

     y_pred = clf.predict(X_test)
     # evaluate the performance of the model
     accuracy = accuracy_score(y_test, y_pred)
     print("Accuracy:", accuracy)

    # export model
     serialise_classifier(clf=clf)

     # Create a confusion matrix
     cm = confusion_matrix(y_test, y_pred)

     # Plot the confusion matrix as a heatmap
     sns.heatmap(cm, annot=True, cmap='Blues', fmt='g', xticklabels=['crash', 'cycle'], yticklabels=['crash', 'cycle'])

     plt.xlabel('Predicted')
     plt.ylabel('True')
     plt.title('RF - Confusion Matrix')
     plt.show()